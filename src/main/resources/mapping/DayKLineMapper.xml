<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quantour.ssm.dao.DayKLineMapper">
  <resultMap id="BaseResultMap" type="com.quantour.ssm.model.DayKLine">
    <id column="stock_code" jdbcType="VARCHAR" property="stockCode" />
    <id column="stock_date" jdbcType="DATE" property="stockDate" />
    <result column="volume" jdbcType="DOUBLE" property="volume" />
    <result column="open_price" jdbcType="DOUBLE" property="openPrice" />
    <result column="close_price" jdbcType="DOUBLE" property="closePrice" />
    <result column="high_price" jdbcType="DOUBLE" property="highPrice" />
    <result column="low_price" jdbcType="DOUBLE" property="lowPrice" />
  </resultMap>
  <sql id="Base_Column_List">
    stock_code, stock_date, volume, open_price, close_price, high_price, low_price
  </sql>


  <select id="selectByPrimaryKey" parameterType="com.quantour.ssm.model.DayKLineKey" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from day_stock
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_date = #{stockDate,jdbcType=DATE}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="com.quantour.ssm.model.DayKLineKey">
    delete from day_stock
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_date = #{stockDate,jdbcType=DATE}
  </delete>
  <insert id="insert" parameterType="com.quantour.ssm.model.DayKLine">
    insert into day_stock (stock_code, stock_date, volume, 
      open_price, close_price, high_price, 
      low_price)
    values (#{stockCode,jdbcType=VARCHAR}, #{stockDate,jdbcType=DATE}, #{volume,jdbcType=DOUBLE}, 
      #{openPrice,jdbcType=DOUBLE}, #{closePrice,jdbcType=DOUBLE}, #{highPrice,jdbcType=DOUBLE}, 
      #{lowPrice,jdbcType=DOUBLE})
  </insert>
  <insert id="insertSelective" parameterType="com.quantour.ssm.model.DayKLine">
    insert into day_stock
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="stockCode != null">
        stock_code,
      </if>
      <if test="stockDate != null">
        stock_date,
      </if>
      <if test="volume != null">
        volume,
      </if>
      <if test="openPrice != null">
        open_price,
      </if>
      <if test="closePrice != null">
        close_price,
      </if>
      <if test="highPrice != null">
        high_price,
      </if>
      <if test="lowPrice != null">
        low_price,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="stockCode != null">
        #{stockCode,jdbcType=VARCHAR},
      </if>
      <if test="stockDate != null">
        #{stockDate,jdbcType=DATE},
      </if>
      <if test="volume != null">
        #{volume,jdbcType=DOUBLE},
      </if>
      <if test="openPrice != null">
        #{openPrice,jdbcType=DOUBLE},
      </if>
      <if test="closePrice != null">
        #{closePrice,jdbcType=DOUBLE},
      </if>
      <if test="highPrice != null">
        #{highPrice,jdbcType=DOUBLE},
      </if>
      <if test="lowPrice != null">
        #{lowPrice,jdbcType=DOUBLE},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.quantour.ssm.model.DayKLine">
    update day_stock
    <set>
      <if test="volume != null">
        volume = #{volume,jdbcType=DOUBLE},
      </if>
      <if test="openPrice != null">
        open_price = #{openPrice,jdbcType=DOUBLE},
      </if>
      <if test="closePrice != null">
        close_price = #{closePrice,jdbcType=DOUBLE},
      </if>
      <if test="highPrice != null">
        high_price = #{highPrice,jdbcType=DOUBLE},
      </if>
      <if test="lowPrice != null">
        low_price = #{lowPrice,jdbcType=DOUBLE},
      </if>
    </set>
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_date = #{stockDate,jdbcType=DATE}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quantour.ssm.model.DayKLine">
    update day_stock
    set volume = #{volume,jdbcType=DOUBLE},
      open_price = #{openPrice,jdbcType=DOUBLE},
      close_price = #{closePrice,jdbcType=DOUBLE},
      high_price = #{highPrice,jdbcType=DOUBLE},
      low_price = #{lowPrice,jdbcType=DOUBLE}
    where stock_code = #{stockCode,jdbcType=VARCHAR}
      and stock_date = #{stockDate,jdbcType=DATE}
  </update>
</mapper>